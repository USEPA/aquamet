% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nrsaGeneral.r
\name{nrsaGeneral}
\alias{nrsaGeneral}
\title{Calculate NRSA General Metrics}
\usage{
nrsaGeneral(
  sampledTransects = NULL,
  sideChannels = NULL,
  transectSpacing = NULL,
  sideChannelTransects = c("XA", "XB", "XC", "XD", "XE", "XF", "XG", "XH", "XI", "XJ",
    "XK"),
  isUnitTest = FALSE,
  argSavePath = NULL
)
}
\arguments{
\item{sampledTransects}{dataframe containing only the list of 
transects sampled for each site, one transect per row. Expected to 
contain the following columns:
 \itemize{
       \item SITE integer or character specifying the site 
                  visit
       \item TRANSECT character value specifying the transect
                      for which values were recorded.
}}

\item{sideChannels}{dataframe containing side channel presence data at each 
station, with the following columns:
\itemize{
         \item SITE integer or character specifying the site visit
         \item VALUE character values, expected to be 'Y', 'N' or NA
}}

\item{transectSpacing}{dataframe containing distances (in meters) between 
transects with the following columns:
\itemize{
     \item SITE integer or character specifying the site visit
     \item TRANSECT character value specifying the transect
                    for which the value was recorded.
     \item VALUE numeric values
}}

\item{sideChannelTransects}{character vector containing values of 
TRANSECT that are used to specify whether a transect is located on a 
side channel.  Default value is for EPA NARS use (XA, XB, etc.)
which occur parallel to main channel transects A, B, etc.}

\item{isUnitTest}{Logical argument to determine whether errors should be ignored.
Should only be used for running a unit test. Default value is FALSE.}

\item{argSavePath}{character string specifying the path to which data 
arguments are saved as csv files, or NULL if those files are not to be 
written.}
}
\value{
Either a data frame when metric calculation is successful or a 
character string containing an error message when metric calculation is 
not successful.  The data frame contains the following columns:
\itemize{
\item SITE - universal ID value
\item METRIC - metric name
\item VALUE - metric value
}

Metrics calculated include: pct_side, reachlen, xtranspc, sidecnt

Descriptions for all metrics are included in 
\emph{NRSA_Physical_Habitat_Metric_Descriptions.pdf} in the package
documentation.
}
\description{
This function calculates the general portion of 
the physical habitat metrics for National Rivers and Streams 
Assessment (NRSA) data.  The function requires data frames containing 
the thalweg and channel geometry data files.
}
\examples{
head(thalwegEx)
head(changeomEx)

# Must carry out several calculations to provide inputs to function, 
# including determining spacing between transects.

# sampledTransects argument
sampTr <- unique(thalwegEx[,c('SITE','TRANSECT')])
# sideChannels argument - if none present, leave out
sideCh <- subset(thalwegEx,PARAMETER \%in\% c('SIDCHN','OFF_CHAN'),select=c(SITE,VALUE))

# Creating the transect spacing for wadeable streams is more complicated 
# than for boatable streams because measurements are only made up to one 
# station before the end of the reach. 
# Keep increment value for wadeable sites, only present for transect A and
#  station 0, then make sure it is numeric.
wTr.1 <- subset(thalwegEx, PARAMETER=='INCREMNT' & TRANSECT=='A' & 
       STATION==0 & SAMPLE_TYPE=='PHAB_THALW',select=c('SITE','VALUE')) 

wTr.2 <- plyr::mutate(wTr.1, VALUE=as.numeric(VALUE)) 
# Identify unique sampled SITE, TRANSECT, STATION combinations, then
#   determine the number of stations for each SITE and TRANSECT
uniqLoc <- unique(subset(thalwegEx, SAMPLE_TYPE=='PHAB_THALW', 
 select = c(SITE,TRANSECT,STATION)))
nStations <- stats::aggregate(x = list(nSta = uniqLoc$STATION), 
    by = uniqLoc[c('SITE','TRANSECT')], FUN = length)
# Merge number of stations back with dataset
wTr.3 <- merge(wTr.2, nStations, by = 'SITE') 
# Identify maximum TRANSECT sampled, merge back with dataset                                      
maxWTr <- stats::aggregate(x = list(lastTran = wTr.3$TRANSECT), by = wTr.3[c('SITE')], 
       FUN = function(x){max(as.character(x))})
wTr.4 <- merge(wTr.3, maxWTr)
# Calculate space between transects for each transect at wadeable sites
wTr.5 <- plyr::mutate(wTr.4, VALUE = ifelse(TRANSECT!=lastTran, nSta*VALUE, (nSta-1)*VALUE)) 
# Keep only necessary variables
wTr.6 <- dplyr::select(wTr.5, -nSta,-lastTran)
# For boatable sites, just use actual transect spacing parameter
bTr <- subset(changeomEx,PARAMETER=='ACTRANSP',select=c('SITE','TRANSECT','VALUE'))
# combine wadeable and boatable transect spacing information
trDist <- rbind(wTr.6,bTr) 
# Ensure values are numeric
trDist$VALUE <- as.numeric(trDist$VALUE)

generalOut <- nrsaGeneral(sampledTransects=sampTr, sideChannels=sideCh,
transectSpacing=trDist)

head(generalOut)
}
\author{
Curt Seeliger \email{Seeliger.Curt@epa.gov}\cr
Tom Kincaid \email{Kincaid.Tom@epa.gov}
}
